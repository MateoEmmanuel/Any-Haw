-- Staff Account List Report --
Delimiter //
create Function fullname(FirstName VARCHAR(255),MiddleName VARCHAR(255),LastName VARCHAR(255))
Returns Varchar(255)
deterministic
BEGIN
	Return concat(FirstName, " ", MiddleName, " ", LastName);
END //

CREATE PROCEDURE AccountReport()
BEGIN
    SELECT 
        fullname(A.FirstName, A.MiddleName, A.LastName) AS "Fullname", 
        A.Username, 
        P_L.Position_name AS "Position",
        AI.Image AS "Profile_Image"  -- Retrieves image data
    FROM Accounts A-- Function for Full Name
DELIMITER //
CREATE FUNCTION fullname(
    FirstName VARCHAR(255),
    MiddleName VARCHAR(255),
    LastName VARCHAR(255)
) RETURNS VARCHAR(255) DETERMINISTIC
BEGIN
    RETURN TRIM(CONCAT(FirstName, ' ', COALESCE(MiddleName, ''), ' ', LastName));
END //

-- Staff Account List Report
CREATE PROCEDURE AccountReport()
BEGIN
    SELECT 
        fullname(A.FirstName, A.MiddleName, A.LastName) AS "Fullname", 
        A.Username, 
        P_L.Position_name AS "Position",
        AI.Image AS "Profile_Image"
    FROM Accounts A
    JOIN Position_List P_L ON A.Position_ID = P_L.Position_ID
    LEFT JOIN Account_Image AI ON A.Image_ID = AI.Image_ID;  -- LEFT JOIN to handle NULL images
END //

-- Activity Log Report
CREATE PROCEDURE ActivityLogReport()
BEGIN
    SELECT 
        A.Username, 
        A_L.Date_Time AS "Date & Time", 
        A_L.Action_Type AS "Activity Type"
    FROM Activity_Log A_L
    JOIN Accounts A ON A_L.Account_ID = A.Account_ID;
END //

-- Top Best Sellers
CREATE PROCEDURE TopBestSellers(IN startDate DATE, IN endDate DATE)
BEGIN
    SELECT * FROM (
        SELECT OI.Item_ID, FL.Food_Name AS "Item Name", 'Food' AS "Category", SUM(OI.Quantity) AS "Total Sold"
        FROM Ordered_Items OI
        JOIN Normal_Food_List NFL ON OI.Item_ID = NFL.N_List_ID
        JOIN Food_List FL ON NFL.Food_ID = FL.Food_ID
        JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
        WHERE OI.Item_Type = 'Food' AND OL.Date_Time BETWEEN startDate AND endDate
        GROUP BY OI.Item_ID
        
        UNION ALL
        
        SELECT OI.Item_ID, DL.Drink_Name AS "Item Name", 'Drink' AS "Category", SUM(OI.Quantity) AS "Total Sold"
        FROM Ordered_Items OI
        JOIN Drink_List DL ON OI.Item_ID = DL.Drink_ID
        JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
        WHERE OI.Item_Type = 'Drink' AND OL.Date_Time BETWEEN startDate AND endDate
        GROUP BY OI.Item_ID
        
        UNION ALL
        
        SELECT OI.Item_ID, DSL.Dessert_Name AS "Item Name", 'Dessert' AS "Category", SUM(OI.Quantity) AS "Total Sold"
        FROM Ordered_Items OI
        JOIN Dessert_List DSL ON OI.Item_ID = DSL.Dessert_ID
        JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
        WHERE OI.Item_Type = 'Dessert' AND OL.Date_Time BETWEEN startDate AND endDate
        GROUP BY OI.Item_ID
        
        UNION ALL
        
        SELECT OI.Item_ID, CFL.Code_Name AS "Item Name", 'Combo' AS "Category", SUM(OI.Quantity) AS "Total Sold"
        FROM Ordered_Items OI
        JOIN Combo_Food_List CFL ON OI.Item_ID = CFL.Combo_List_ID
        JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
        WHERE OI.Item_Type = 'Combo' AND OL.Date_Time BETWEEN startDate AND endDate
        GROUP BY OI.Item_ID
    ) AS AllItems
    ORDER BY `Total Sold` DESC
    LIMIT 5;
END //

-- Daily Sales Report
CREATE PROCEDURE DailySalesReport()
BEGIN
    SELECT DATE(Date_Time) AS "Date", COUNT(Or_Logs_ID) AS "Total Orders", SUM(Total_Price) AS "Total Sales"
    FROM Ordered_Logs
    GROUP BY DATE(Date_Time);
END //

-- Monthly Sales Report
CREATE PROCEDURE MonthlySalesReport()
BEGIN
    SELECT DATE_FORMAT(Date_Time, '%Y-%m') AS "Month", COUNT(Or_Logs_ID) AS "Total Orders", SUM(Total_Price) AS "Total Sales"
    FROM Ordered_Logs
    WHERE YEAR(Date_Time) = YEAR(CURDATE())
    GROUP BY DATE_FORMAT(Date_Time, '%Y-%m');
END //

-- Insert Account Procedure
CREATE PROCEDURE InsertAccount(    
    IN p_Type_ID INT,
    IN p_Position_Name VARCHAR(100),
    IN p_Image LONGBLOB,
    IN p_FirstName VARCHAR(255),
    IN p_MiddleName VARCHAR(255),
    IN p_LastName VARCHAR(255),
    IN p_Username VARCHAR(255),
    IN p_Password VARCHAR(255)
)
BEGIN
    DECLARE p_Position_ID INT;  
    DECLARE p_Image_ID INT;
    DECLARE p_UsernameExists INT;

    SELECT Position_ID INTO p_Position_ID FROM Position_List WHERE Position_name = p_Position_Name LIMIT 1;

    IF p_Position_ID IS NULL THEN
        SELECT 'Error: Position does not exist!' AS Message;
    ELSE
        IF p_Image IS NOT NULL THEN
            INSERT INTO Account_Image (Image) VALUES (p_Image);
            SET p_Image_ID = LAST_INSERT_ID();
        ELSE
            SET p_Image_ID = NULL;
        END IF;

        SELECT COUNT(*) INTO p_UsernameExists FROM Accounts WHERE Username = p_Username;

        IF p_UsernameExists > 0 THEN
            SELECT 'Error: Username already exists!' AS Message;
        ELSE
            INSERT INTO Accounts (Type_ID, Position_ID, Image_ID, FirstName, MiddleName, LastName, Username, Password)
            VALUES (p_Type_ID, p_Position_ID, p_Image_ID, p_FirstName, p_MiddleName, p_LastName, p_Username, p_Password);
            SELECT 'Account inserted successfully!' AS Message;
        END IF;
    END IF;
END //

-- High Spending Days Report (Weekly)
CREATE PROCEDURE HighSpendingDays_Weekly()
BEGIN
    SELECT DATE(O.Date_Time) AS "Date", SUM(O.Total_Price) AS "Total Revenue"
    FROM Ordered_Logs O
    WHERE YEARWEEK(O.Date_Time) = YEARWEEK(CURDATE()) 
    GROUP BY DATE(O.Date_Time)
    ORDER BY SUM(O.Total_Price) DESC
    LIMIT 5;
END //

-- High Spending Days Report (Monthly)
CREATE PROCEDURE HighSpendingDays_Monthly()
BEGIN
    SELECT DATE(O.Date_Time) AS "Date", SUM(O.Total_Price) AS "Total Revenue"
    FROM Ordered_Logs O
    WHERE YEAR(O.Date_Time) = YEAR(CURDATE()) AND MONTH(O.Date_Time) = MONTH(CURDATE())
    GROUP BY DATE(O.Date_Time)
    ORDER BY SUM(O.Total_Price) DESC
    LIMIT 5;
END //
DELIMITER ;

    JOIN Position_List P_L ON A.Position_ID = P_L.Position_ID
    JOIN Account_Image AI ON A.Image_ID = AI.Image_ID;  -- Joins to fetch image
END //


CREATE PROCEDURE ActivityLogReport()
BEGIN
    SELECT 
        A.Username, 
        A_L.Date_Time as "Date & Time", 
        A_Ty.Typename as "Activity Type", 
        A_Ta.Table_Name as "Affected Table Name", 
        A_L.Affected_Row_ID as "Affected Row ID", 
        A_L.Details
    FROM Activity_Log A_L
    JOIN Accounts A ON A_L.Account_ID = A.Account_ID
    JOIN Action_Type A_Ty ON A_L.Action_Type_ID = A_Ty.Action_Type_ID
    LEFT JOIN Affected_Table A_Ta ON A_L.Affected_Table_ID = A_Ta.Affected_Table_ID;
END //


CREATE PROCEDURE TopBestSellers(IN startDate DATE, IN endDate DATE)
BEGIN
    -- Combined query using UNION ALL
    SELECT 
        OI.Item_ID, FL.Food_Name AS "Item Name", 'Food' AS "Category", SUM(OI.Quantity) AS "Total Sold"
    FROM Ordered_Items OI
    JOIN Normal_Food_List NFL ON OI.Item_ID = NFL.N_List_ID
    JOIN Food_List FL ON NFL.Food_ID = FL.Food_ID
    JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
    WHERE OI.Item_Type = 'Food' AND DATE(OL.Date_Time) BETWEEN DATE(startDate) AND DATE(endDate)
    GROUP BY OI.Item_ID
    
    UNION ALL
    
    SELECT 
        OI.Item_ID, DL.Drink_Name AS "Item Name", 'Drink' AS "Category", SUM(OI.Quantity) AS "Total Sold"
    FROM Ordered_Items OI
    JOIN Drink_List DL ON OI.Item_ID = DL.Drink_ID
    JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
    WHERE OI.Item_Type = 'Drink' AND DATE(OL.Date_Time) BETWEEN DATE(startDate) AND DATE(endDate)
    GROUP BY OI.Item_ID
    
    UNION ALL
    
    SELECT 
        OI.Item_ID, DSL.Dessert_Name AS "Item Name", 'Dessert' AS "Category", SUM(OI.Quantity) AS "Total Sold"
    FROM Ordered_Items OI
    JOIN Dessert_List DSL ON OI.Item_ID = DSL.Dessert_ID
    JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
    WHERE OI.Item_Type = 'Dessert' AND DATE(OL.Date_Time) BETWEEN DATE(startDate) AND DATE(endDate)
    GROUP BY OI.Item_ID
    
    UNION ALL
    
    SELECT OI.Item_ID, CFL.Code_Name AS "Item Name", 'Combo' AS "Category", SUM(OI.Quantity) AS "Total Sold"
		FROM Ordered_Items OI
		JOIN Combo_Food_List CFL ON OI.Item_ID = CFL.Combo_List_ID
		JOIN Ordered_Logs OL ON OI.Or_Logs_ID = OL.Or_Logs_ID
		WHERE OI.Item_Type = 'Combo' AND DATE(OL.Date_Time) BETWEEN DATE(startDate) AND DATE(endDate)
		GROUP BY OI.Item_ID, CFL.Code_Name
		LIMIT 5;

END //


CREATE PROCEDURE DailySalesReport()
BEGIN
    SELECT 
        DATE(Date_Time) AS "Date", 
        COUNT(Or_Logs_ID) AS "Total Orders",
        SUM(Total_Price) AS "Total Sales"
    FROM Ordered_Logs
    GROUP BY DATE(Date_Time);
END //

-- Weekly Sales Report --
CREATE PROCEDURE WeeklySalesReport()
BEGIN
    SELECT 
        YEARWEEK(Date_Time) AS "YearWeek", 
        COUNT(Or_Logs_ID) AS "Total Orders",
        SUM(Total_Price) AS "Total Sales"
    FROM Ordered_Logs
    GROUP BY YEARWEEK(Date_Time);
END //

-- Monthly Sales Report --
CREATE PROCEDURE MonthlySalesReport()
BEGIN
	SELECT 
		DATE_FORMAT(Date_Time, '%Y-%m') AS "Month", 
		COUNT(Or_Logs_ID) AS "Total Orders",
		SUM(Total_Price) AS "Total Sales"
	FROM Ordered_Logs
	WHERE YEAR(Date_Time) = YEAR(CURDATE()) 
	GROUP BY DATE_FORMAT(Date_Time, '%Y-%m');
END //

-- Yearly Sales Report --
CREATE PROCEDURE YearlySalesReport()
BEGIN
    SELECT 
        YEAR(Date_Time) AS "Year", 
        COUNT(Or_Logs_ID) AS "Total Orders",
        SUM(Total_Price) AS "Total Sales"
    FROM Ordered_Logs
    GROUP BY YEAR(Date_Time);
END //

CREATE PROCEDURE SalesReportByDateRange(IN startDate DATE, IN endDate DATE)
BEGIN
    SELECT 
        DATE(Date_Time) AS "Date", 
        COUNT(Or_Logs_ID) AS "Total Orders",
        SUM(Total_Price) AS "Total Sales"
    FROM Ordered_Logs
    WHERE DATE(Date_Time) BETWEEN startDate AND endDate
    GROUP BY DATE(Date_Time);
END //


CREATE PROCEDURE DailyBestSellers()
BEGIN
    CALL TopBestSellers(CURDATE(), CURDATE());
END //

-- Weekly Best Sellers --
CREATE PROCEDURE WeeklyBestSellers()
BEGIN
    CALL TopBestSellers(DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), CURDATE());
END //

-- Monthly Best Sellers --
CREATE PROCEDURE MonthlyBestSellers()
BEGIN
    CALL TopBestSellers(DATE_FORMAT(CURDATE(), '%Y-%m-01'), CURDATE());
END //

-- Yearly Best Sellers --
CREATE PROCEDURE YearlyBestSellers()
BEGIN
    CALL TopBestSellers(DATE_FORMAT(CURDATE(), '%Y-01-01'), CURDATE());
END //


CREATE PROCEDURE HighSpendingDays_Weekly() -- checks from monday to current day --
BEGIN
    SELECT 
        DATE(O.Date_Time) AS "Date",
        SUM(O.Total_Price) AS "Total Revenue"
    FROM Ordered_Logs O
    WHERE YEARWEEK(O.Date_Time) = YEARWEEK(CURDATE())  -- Filter current week
    GROUP BY DATE(O.Date_Time)
    ORDER BY SUM(O.Total_Price) DESC
    LIMIT 5; -- Top 5 highest revenue days
END //

CREATE PROCEDURE HighSpendingDays_Monthly() -- checks the current month --
BEGIN
    SELECT 
        DATE(O.Date_Time) AS "Date",
        SUM(O.Total_Price) AS "Total Revenue"
    FROM Ordered_Logs O
    WHERE YEAR(O.Date_Time) = YEAR(CURDATE()) 
      AND MONTH(O.Date_Time) = MONTH(CURDATE())  -- Filter current month --
    GROUP BY DATE(O.Date_Time)
    ORDER BY SUM(O.Total_Price) DESC
    LIMIT 5; -- Top 5 highest revenue days
END //

CREATE PROCEDURE HighSpendingDays_Yearly() -- checks the current year --
BEGIN
    SELECT 
        DATE(O.Date_Time) AS "Date",
        SUM(O.Total_Price) AS "Total Revenue"
    FROM Ordered_Logs O
    WHERE YEAR(O.Date_Time) = YEAR(CURDATE())  -- Filter current year
    GROUP BY DATE(O.Date_Time)
    ORDER BY SUM(O.Total_Price) DESC
    LIMIT 5; -- Top 5 highest revenue days
END //


CREATE PROCEDURE InsertAccount(    
    IN p_Type_ID INT,
    IN p_Position_Name VARCHAR(100),  -- Accepts position name instead of Position_ID
    IN p_Image_ID INT,
    IN p_FirstName VARCHAR(255),
    IN p_MiddleName VARCHAR(255),
    IN p_LastName VARCHAR(255),
    IN p_Username VARCHAR(255),
    IN p_Password VARCHAR(255)
)
BEGIN
    DECLARE p_Position_ID INT;  -- Variable to store the fetched Position_ID

    -- Get Position_ID based on Position_Name
    SELECT Position_ID INTO p_Position_ID 
    FROM Position_List 
    WHERE Position_name = p_Position_Name 
    LIMIT 1;

    -- If position doesn't exist, return an error message to user
    IF p_Position_ID IS NULL THEN
        SELECT 'Error: Position does not exist!' AS Message;
    ELSE
        -- Ensure NULL Image_ID defaults to 0
        IF p_Image_ID IS NULL THEN
            SET p_Image_ID = 1;
        END IF;

        -- Check if username already exists
        IF EXISTS (SELECT 1 FROM Accounts WHERE Username = p_Username) THEN
            SELECT 'Error: Username already exists!' AS Message;
        ELSE
            -- Insert new account with the fetched Position_ID
            INSERT INTO Accounts 
            (Type_ID, Position_ID, Image_ID, FirstName, MiddleName, LastName, Username, Password)
            VALUES 
            (p_Type_ID, p_Position_ID, p_Image_ID, p_FirstName, p_MiddleName, p_LastName, p_Username, p_Password);

            SELECT 'Account inserted successfully!' AS Message;
        END IF;
    END IF;
END //


CREATE PROCEDURE CheckCategoryExistence(
    IN p_ProductType ENUM('Food', 'Drink', 'Dessert', 'Combo'),
    IN p_CategoryID INT
)
BEGIN
    DECLARE v_CategoryExists INT;

    -- Check if category exists based on the product type
    IF p_ProductType = 'Food' THEN
        SELECT COUNT(*) INTO v_CategoryExists FROM Food_Category WHERE F_Category_ID = p_CategoryID;
    ELSEIF p_ProductType = 'Drink' THEN
        SELECT COUNT(*) INTO v_CategoryExists FROM Drink_Category WHERE Dr_Category_ID = p_CategoryID;
    ELSEIF p_ProductType = 'Dessert' THEN
        SELECT COUNT(*) INTO v_CategoryExists FROM Dessert_Category WHERE De_Category_ID = p_CategoryID;
    ELSEIF p_ProductType = 'Combo' THEN
        SELECT COUNT(*) INTO v_CategoryExists FROM Combo_Category WHERE C_Category_ID = p_CategoryID;
    END IF;

    -- If the category does not exist, return an error
    IF v_CategoryExists = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Error: The specified category does not exist.';
    END IF;
END //

CREATE PROCEDURE AddNewCategory(
    IN p_CategoryName VARCHAR(255),
    IN p_CategoryType ENUM('Food', 'Drink', 'Dessert', 'Combo')
)
BEGIN
    DECLARE v_Category_ID INT;

    -- Check if category already exists and insert if missing
    IF p_CategoryType = 'Food' THEN
        SELECT F_Category_ID INTO v_Category_ID FROM Food_Category WHERE Category_Name = p_CategoryName LIMIT 1;
        IF v_Category_ID IS NULL THEN
            INSERT INTO Food_Category (Category_Name) VALUES (p_CategoryName);
        ELSE
            SELECT 'Category already exists in Food_Category' AS Message;
        END IF;
    ELSEIF p_CategoryType = 'Drink' THEN
        SELECT Dr_Category_ID INTO v_Category_ID FROM Drink_Category WHERE Category_Name = p_CategoryName LIMIT 1;
        IF v_Category_ID IS NULL THEN
            INSERT INTO Drink_Category (Category_Name) VALUES (p_CategoryName);
        ELSE
            SELECT 'Category already exists in Drink_Category' AS Message;
        END IF;
    ELSEIF p_CategoryType = 'Dessert' THEN
        SELECT De_Category_ID INTO v_Category_ID FROM Dessert_Category WHERE Category_Name = p_CategoryName LIMIT 1;
        IF v_Category_ID IS NULL THEN
            INSERT INTO Dessert_Category (Category_Name) VALUES (p_CategoryName);
        ELSE
            SELECT 'Category already exists in Dessert_Category' AS Message;
        END IF;
    ELSEIF p_CategoryType = 'Combo' THEN
        SELECT C_Category_ID INTO v_Category_ID FROM Combo_Category WHERE Category_Name = p_CategoryName LIMIT 1;
        IF v_Category_ID IS NULL THEN
            INSERT INTO Combo_Category (Category_Name) VALUES (p_CategoryName);
        ELSE
            SELECT 'Category already exists in Combo_Category' AS Message;
        END IF;
    END IF;

    SELECT 'Category added successfully!' AS Message;
END //

CREATE PROCEDURE AddNewProduct(
    IN p_ProductType ENUM('Food', 'Drink', 'Dessert'),
    IN p_CategoryID INT,
    IN p_ProductName VARCHAR(255),
    IN p_Description VARCHAR(255),
    IN p_Price DECIMAL(10,2),
    IN p_CodeName VARCHAR(50),
    IN p_Image BLOB           
)
BEGIN
    DECLARE p_Image_ID INT;
    DECLARE p_Food_ID INT;

    -- Step 1: Ensure the Category Exists
    CALL CheckCategoryExistence(p_ProductType, p_CategoryID);

    -- Step 2: Insert Image if not provided
    IF p_Image IS NULL THEN
        INSERT INTO Image_List (Image) VALUES (p_ProductName);
        SET p_Image_ID = LAST_INSERT_ID();
    ELSE
        INSERT INTO Image_List (Image) VALUES (p_Image);
        SET p_Image_ID = LAST_INSERT_ID();
    END IF;

    -- Step 3: Insert into the respective product list based on type
    IF p_ProductType = 'Food' THEN
        -- Check if the food already exists in Food_List
        SELECT Food_ID INTO p_Food_ID FROM Food_List WHERE Food_Name = p_ProductName LIMIT 1;
        IF p_Food_ID IS NULL THEN
            INSERT INTO Food_List (Food_Name) VALUES (p_ProductName);
            SET p_Food_ID = LAST_INSERT_ID();
        END IF;

        -- Insert into Normal_Food_List
        INSERT INTO Normal_Food_List (Food_ID, F_Category_ID, Image_ID, Description, Price, Code_Name)
        VALUES (p_Food_ID, p_CategoryID, p_Image_ID, p_Description, p_Price, p_CodeName);

    ELSEIF p_ProductType = 'Drink' THEN
        INSERT INTO Drink_List (Dr_Category_ID, Image_ID, Drink_Name, Code_Name, Price)
        VALUES (p_CategoryID, p_Image_ID, p_ProductName, p_CodeName, p_Price);

    ELSEIF p_ProductType = 'Dessert' THEN
        INSERT INTO Dessert_List (De_Category_ID, Image_ID, Dessert_Name, Code_Name, Price)
        VALUES (p_CategoryID, p_Image_ID, p_ProductName, p_CodeName, p_Price);
    END IF;

    SELECT 'Product added successfully!' AS Message;
END //


CREATE PROCEDURE AddNewComboList(
    IN p_CategoryID INT,
    IN p_CodeName VARCHAR(50),
    IN p_Description TEXT,
    IN p_Price DECIMAL(10,2),
    IN p_Image LONGBLOB
)
BEGIN
    DECLARE p_CategoryExists INT;
    DECLARE p_ImageID INT;
    DECLARE p_DetailsID INT;

    -- Check if category exists
    SELECT COUNT(*) INTO p_CategoryExists FROM Combo_Category WHERE C_Category_ID = p_CategoryID;
    
    -- If category does not exist, return an error message
    IF p_CategoryExists = 0 THEN
        SELECT 'No category found in the list' AS Message;
    ELSE
        -- Insert image if provided, otherwise use NULL
        IF p_Image IS NOT NULL THEN
            INSERT INTO Image_List (Image) VALUES (p_Image);
            SET p_ImageID = LAST_INSERT_ID();
        ELSE
            INSERT INTO Image_List (Image) VALUES (p_CodeName);
			SET p_ImageID = LAST_INSERT_ID();
        END IF;

        -- Insert into Combo_Food_Details
        INSERT INTO Combo_Food_Details (Image_ID, Description, Price)
        VALUES (p_ImageID, p_Description, p_Price);

        SET p_DetailsID = LAST_INSERT_ID();

        -- Insert into Combo_Food_List
        INSERT INTO Combo_Food_List (C_Category_ID, C_Details_ID, Code_Name)
        VALUES (p_CategoryID, p_DetailsID, p_CodeName);

        SELECT 'Combo successfully added!' AS Message;
    END IF;
END //


CREATE PROCEDURE AddNewComboOrganizer(
    IN p_ComboListID INT,
    IN p_ItemID INT,
    IN p_ItemType ENUM('Food', 'Drink', 'Dessert')
)
BEGIN
    DECLARE p_ComboExists INT;
    DECLARE p_ItemExists INT;

    -- Check if the Combo exists in Combo_Food_List
    SELECT COUNT(*) INTO p_ComboExists FROM Combo_Food_List WHERE Combo_List_ID = p_ComboListID;

    -- If Combo does not exist, return an error message
    IF p_ComboExists = 0 THEN
        SELECT 'No combo found in the list' AS Message;
    ELSE
        -- Check if the item exists in the respective table based on its type
        IF p_ItemType = 'Food' THEN
            SELECT COUNT(*) INTO p_ItemExists FROM Normal_Food_List WHERE N_List_ID = p_ItemID;
        ELSEIF p_ItemType = 'Drink' THEN
            SELECT COUNT(*) INTO p_ItemExists FROM Drink_List WHERE Drink_ID = p_ItemID;
        ELSEIF p_ItemType = 'Dessert' THEN
            SELECT COUNT(*) INTO p_ItemExists FROM Dessert_List WHERE Dessert_ID = p_ItemID;
        END IF;

        -- If item does not exist, return an error message
        IF p_ItemExists = 0 THEN
            SELECT 'No item found in the list' AS Message;
        ELSE
            -- Insert into Combo_Food_Organizer using Combo_List_ID
            INSERT INTO Combo_Food_Organizer (Item_ID, Item_Type, Combo_List_ID)
            VALUES (p_ItemID, p_ItemType, p_ComboListID);

            SELECT 'Item successfully added to combo!' AS Message;
        END IF;
    END IF;
END //
