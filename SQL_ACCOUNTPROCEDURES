-- Function for Full Name
DELIMITER //
CREATE FUNCTION fullname(
    FirstName VARCHAR(255),
    MiddleName VARCHAR(255),
    LastName VARCHAR(255)
) RETURNS VARCHAR(255) DETERMINISTIC
BEGIN
    RETURN TRIM(CONCAT(FirstName, ' ', IFNULL(CONCAT(MiddleName, ' '), ''), LastName));
END //

CREATE PROCEDURE InsertAccountType(
    IN p_Type_Name VARCHAR(15)
)
BEGIN
    INSERT INTO Account_Type (Type_name) 
    VALUES (p_Type_Name);

    SELECT 'Account type inserted successfully!' AS Message;
END //

CREATE PROCEDURE InsertPosition(
    IN p_Position_Name VARCHAR(100),
    IN p_Salary DECIMAL(10,2)
)
BEGIN
    INSERT INTO Position_List (Position_name, Salary) 
    VALUES (p_Position_Name, p_Salary);

    SELECT 'Position inserted successfully!' AS Message;
END //


-- Insert Account Procedure
CREATE PROCEDURE InsertAccount(    
    IN p_Type_ID INT,
    IN p_Position_Name VARCHAR(100),
    IN p_Image LONGBLOB,
    IN p_FirstName VARCHAR(255),
    IN p_MiddleName VARCHAR(255),
    IN p_LastName VARCHAR(255),
    IN p_Username VARCHAR(255),
    IN p_Password VARCHAR(255)
)
BEGIN
    DECLARE p_Position_ID INT;  
    DECLARE p_Image_ID INT;
    DECLARE p_UsernameExists INT;

    SELECT Position_ID INTO p_Position_ID FROM Position_List WHERE Position_name = p_Position_Name LIMIT 1;

    IF p_Position_ID IS NULL THEN
        SELECT 'Error: Position does not exist!' AS Message;
    ELSE
        IF p_Image IS NOT NULL THEN
            INSERT INTO Account_Image (Image) VALUES (p_Image);
            SET p_Image_ID = LAST_INSERT_ID();
        ELSE
            INSERT INTO Account_Image (Image) VALUES ("None");
        END IF;

        SELECT COUNT(*) INTO p_UsernameExists FROM Accounts WHERE Username = p_Username;

        IF p_UsernameExists > 0 THEN
            SELECT 'Error: Username already exists!' AS Message;
        ELSE
            INSERT INTO Accounts (Type_ID, Position_ID, Image_ID, FirstName, MiddleName, LastName, Username, Password)
            VALUES (p_Type_ID, p_Position_ID, p_Image_ID, p_FirstName, p_MiddleName, p_LastName, p_Username, p_Password);
            SELECT 'Account inserted successfully!' AS Message;
        END IF;
    END IF;
END //

CREATE PROCEDURE UpdateAccountInfo(
    IN p_Username VARCHAR(255),
    IN p_Type_ID INT,
    IN p_Position_Name VARCHAR(100),
    IN p_Image LONGBLOB,
    IN p_FirstName VARCHAR(255),
    IN p_MiddleName VARCHAR(255),
    IN p_LastName VARCHAR(255)
)
BEGIN
    DECLARE p_Account_ID INT;
    DECLARE p_Position_ID INT;
    DECLARE p_Image_ID INT;

    -- Get Account_ID and Image_ID
    SELECT Account_ID, Image_ID INTO p_Account_ID, p_Image_ID 
    FROM Accounts 
    WHERE Username = p_Username 
    LIMIT 1;

    -- Check if the account exists
    IF p_Account_ID IS NULL THEN
        SELECT 'Error: Username not found!' AS Message;
    ELSE
        -- Get Position_ID based on Position Name
        SELECT Position_ID INTO p_Position_ID FROM Position_List 
        WHERE Position_name = p_Position_Name LIMIT 1;

        IF p_Position_ID IS NULL THEN
            SELECT 'Error: Position does not exist!' AS Message;
        ELSE
            -- If a new image is provided, update the existing image
            IF p_Image IS NOT NULL THEN
                UPDATE Account_Image 
                SET Image = p_Image 
                WHERE Image_ID = p_Image_ID;
            END IF;

            -- Update Account Information (Excluding Username & Password)
            UPDATE Accounts 
            SET 
                Type_ID = p_Type_ID,
                Position_ID = p_Position_ID,
                FirstName = p_FirstName,
                MiddleName = p_MiddleName,
                LastName = p_LastName
            WHERE Account_ID = p_Account_ID;

            SELECT 'Account information updated successfully!' AS Message;
        END IF;
    END IF;
END //

CREATE PROCEDURE UpdateAccount(
    IN p_Username VARCHAR(255),
    IN p_NewUsername VARCHAR(255),
    IN p_NewPassword VARCHAR(255)
)
BEGIN
    DECLARE p_Account_ID INT;
    DECLARE p_UsernameExists INT;

    -- Get Account_ID using the old Username
    SELECT Account_ID INTO p_Account_ID FROM Accounts WHERE Username = p_Username LIMIT 1;

    -- Check if the account exists
    IF p_Account_ID IS NULL THEN
        SELECT 'Error: Username not found!' AS Message;
    ELSE
        -- Check if the new username already exists (excluding the current account)
        SELECT COUNT(*) INTO p_UsernameExists FROM Accounts 
        WHERE Username = p_NewUsername AND Account_ID <> p_Account_ID;

        IF p_UsernameExists > 0 THEN
            SELECT 'Error: New username already exists!' AS Message;
        ELSE
            -- Update only the Username and Password
            UPDATE Accounts 
            SET 
                Username = p_NewUsername,
                Password = p_NewPassword
            WHERE Account_ID = p_Account_ID;

            SELECT 'Username and password updated successfully!' AS Message;
        END IF;
    END IF;
END //

CREATE PROCEDURE UpdateAccountType(
    IN p_Type_ID INT,
    IN p_New_Type_Name VARCHAR(15)
)
BEGIN
    DECLARE p_TypeExists INT;

    -- Check if the account type exists
    SELECT COUNT(*) INTO p_TypeExists FROM Account_Type WHERE Type_ID = p_Type_ID;

    IF p_TypeExists = 0 THEN
        SELECT 'Error: Account type not found!' AS Message;
    ELSE
        UPDATE Account_Type 
        SET Type_name = p_New_Type_Name
        WHERE Type_ID = p_Type_ID;

        SELECT 'Account type updated successfully!' AS Message;
    END IF;
END //

CREATE PROCEDURE UpdatePosition(
    IN p_Position_ID INT,
    IN p_New_Position_Name VARCHAR(100),
    IN p_New_Salary DECIMAL(10,2)
)
BEGIN
    DECLARE p_PositionExists INT;

    -- Check if the position exists
    SELECT COUNT(*) INTO p_PositionExists FROM Position_List WHERE Position_ID = p_Position_ID;

    IF p_PositionExists = 0 THEN
        SELECT 'Error: Position not found!' AS Message;
    ELSE
        UPDATE Position_List 
        SET 
            Position_name = p_New_Position_Name,
            Salary = p_New_Salary
        WHERE Position_ID = p_Position_ID;

        SELECT 'Position updated successfully!' AS Message;
    END IF;
END //
 
 
 -- DELETE --
 CREATE PROCEDURE DeleteAccountType(
    IN p_Type_ID INT
)
BEGIN
    DECLARE p_ReferenceExists INT;

    -- Check if the Type_ID is referenced in Accounts
    SELECT COUNT(*) INTO p_ReferenceExists FROM Accounts WHERE Type_ID = p_Type_ID;

    IF p_ReferenceExists > 0 THEN
        SELECT 'Error: Cannot delete account type, it is referenced in accounts!' AS Message;
    ELSE
        DELETE FROM Account_Type WHERE Type_ID = p_Type_ID;
        SELECT 'Account type deleted successfully!' AS Message;
    END IF;
END //

CREATE PROCEDURE DeletePosition(
    IN p_Position_ID INT
)
BEGIN
    DECLARE p_ReferenceExists INT;

    -- Check if the Position_ID is referenced in Accounts
    SELECT COUNT(*) INTO p_ReferenceExists FROM Accounts WHERE Position_ID = p_Position_ID;

    IF p_ReferenceExists > 0 THEN
        SELECT 'Error: Cannot delete position, it is referenced in accounts!' AS Message;
    ELSE
        DELETE FROM Position_List WHERE Position_ID = p_Position_ID;
        SELECT 'Position deleted successfully!' AS Message;
    END IF;
END //

CREATE PROCEDURE DeleteAccount(
    IN p_Username VARCHAR(255)
)
BEGIN
    DECLARE p_Account_ID INT;
    DECLARE p_Image_ID INT;

    -- Get Account_ID and Image_ID
    SELECT Account_ID, Image_ID INTO p_Account_ID, p_Image_ID 
    FROM Accounts WHERE Username = p_Username LIMIT 1;

    -- Check if the account exists
    IF p_Account_ID IS NULL THEN
        SELECT 'Error: Account not found!' AS Message;
    ELSE
        -- Delete the account
        DELETE FROM Accounts WHERE Account_ID = p_Account_ID;

        -- Delete the image associated with the account
        DELETE FROM Account_Image WHERE Image_ID = p_Image_ID;

        SELECT 'Account deleted successfully!' AS Message;
    END IF;
END //


-- triggers --


CREATE TRIGGER InsertLog
AFTER INSERT ON Accounts
FOR EACH ROW
BEGIN
    DECLARE v_Type_Name VARCHAR(15);
    DECLARE v_Position_Name VARCHAR(100);

    -- Get the Account Type Name
    SELECT Type_name INTO v_Type_Name FROM Account_Type WHERE Type_ID = NEW.Type_ID;

    -- Get the Position Name
    SELECT Position_name INTO v_Position_Name FROM Position_List WHERE Position_ID = NEW.Position_ID;

    -- Insert into System_Log
    INSERT INTO System_Log (
        Action_Type, 
        Table_Name, 
        Affected_Row_ID, 
        Old_Data, 
        New_Data, 
        Full_Details
    ) 
    VALUES (
        'INSERT', 
        'Accounts', 
        NEW.Account_ID, 
        'N/A', 
        NEW.Username, 
        CONCAT(
            'Inserted new account: Username=', NEW.Username, 
            ', Type=', v_Type_Name, 
            ', Position=', v_Position_Name, 
            ', FirstName=', NEW.FirstName, 
            ', MiddleName=', IFNULL(NEW.MiddleName, 'NULL'), 
            ', LastName=', NEW.LastName, 
            ' at (', DATE_FORMAT(NOW(), '%H:%i:%s - %m/%d/%Y'), ')'
        )
    );
END //


CREATE TRIGGER UpdateLog
AFTER UPDATE ON Accounts
FOR EACH ROW
BEGIN
    DECLARE v_Old_Type_Name VARCHAR(15);
    DECLARE v_New_Type_Name VARCHAR(15);
    DECLARE v_Old_Position_Name VARCHAR(100);
    DECLARE v_New_Position_Name VARCHAR(100);

    -- Get the old and new Account Type Names
    SELECT Type_name INTO v_Old_Type_Name FROM Account_Type WHERE Type_ID = OLD.Type_ID;
    SELECT Type_name INTO v_New_Type_Name FROM Account_Type WHERE Type_ID = NEW.Type_ID;

    -- Get the old and new Position Names
    SELECT Position_name INTO v_Old_Position_Name FROM Position_List WHERE Position_ID = OLD.Position_ID;
    SELECT Position_name INTO v_New_Position_Name FROM Position_List WHERE Position_ID = NEW.Position_ID;

    -- Insert into System_Log
    INSERT INTO System_Log (
        Action_Type, 
        Table_Name, 
        Affected_Row_ID, 
        Old_Data, 
        New_Data, 
        Full_Details
    ) 
    VALUES (
        'UPDATE', 
        'Accounts', 
        OLD.Account_ID, 
        OLD.Username, 
        NEW.Username, 
        CONCAT(
            'Updated account: Username from "', OLD.Username, '" to "', NEW.Username, '"',
            ', Type from "', v_Old_Type_Name, '" to "', v_New_Type_Name, '"',
            ', Position from "', v_Old_Position_Name, '" to "', v_New_Position_Name, '"',
            ', FirstName from "', OLD.FirstName, '" to "', NEW.FirstName, '"',
            ', MiddleName from "', IFNULL(OLD.MiddleName, 'NULL'), '" to "', IFNULL(NEW.MiddleName, 'NULL'), '"',
            ', LastName from "', OLD.LastName, '" to "', NEW.LastName, '"',
            ' at (', DATE_FORMAT(NOW(), '%H:%i:%s - %m/%d/%Y'), ')'
        )
    );
END //

CREATE TRIGGER DeleteLog
AFTER DELETE ON Accounts
FOR EACH ROW
BEGIN
    DECLARE v_Old_Type_Name VARCHAR(15);
    DECLARE v_Old_Position_Name VARCHAR(100);

    -- Get the old Account Type Name
    SELECT Type_name INTO v_Old_Type_Name FROM Account_Type WHERE Type_ID = OLD.Type_ID;

    -- Get the old Position Name
    SELECT Position_name INTO v_Old_Position_Name FROM Position_List WHERE Position_ID = OLD.Position_ID;

    -- Insert into System_Log
    INSERT INTO System_Log (
        Action_Type, 
        Table_Name, 
        Affected_Row_ID, 
        Old_Data, 
        New_Data, 
        Full_Details
    ) 
    VALUES (
        'DELETE', 
        'Accounts', 
        OLD.Account_ID, 
        OLD.Username, 
        'N/A', 
        CONCAT(
            'Deleted account: Username="', OLD.Username, '"',
            ', Type="', v_Old_Type_Name, '"',
            ', Position="', v_Old_Position_Name, '"',
            ', FirstName="', OLD.FirstName, '"',
            ', MiddleName="', IFNULL(OLD.MiddleName, 'NULL'), '"',
            ', LastName="', OLD.LastName, '"',
            ' at (', DATE_FORMAT(NOW(), '%H:%i:%s - %m/%d/%Y'), ')'
        )
    );
END //
